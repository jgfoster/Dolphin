| package |
package := Package name: 'RBRefactorings'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: 'Refactoring Browser Refactorings
Copyright (c) John Brant & Don Roberts.

Ported to Dolphin by Blair McGlashan and Andy Bower at Camp Smalltalk 1 in San Diego, 2000.

Browse the ''*-RB fixes'' pseudo-category to find the modifications made as part of the Dolphin port.'.


package setClassNames: #(
	#{AbstractClassVariableRefactoring}
	#{AbstractInstanceVariableRefactoring}
	#{AbstractVariablesRefactoring}
	#{AddClassRefactoring}
	#{AddClassVariableRefactoring}
	#{AddInstanceVariableRefactoring}
	#{AddMethodRefactoring}
	#{AddParameterRefactoring}
	#{ChangeMethodNameRefactoring}
	#{ChildrenToSiblingsRefactoring}
	#{ClassRefactoring}
	#{CreateAccessorsForVariableRefactoring}
	#{ExpandReferencedPoolsRefactoring}
	#{ExtractMethodRefactoring}
	#{ExtractMethodToComponentRefactoring}
	#{ExtractToTemporaryRefactoring}
	#{InlineAllSendersRefactoring}
	#{InlineMethodFromComponentRefactoring}
	#{InlineMethodRefactoring}
	#{InlineParameterRefactoring}
	#{InlineTemporaryRefactoring}
	#{MethodRefactoring}
	#{MoveMethodRefactoring}
	#{MoveVariableDefinitionRefactoring}
	#{ProtectInstanceVariableRefactoring}
	#{PullUpClassVariableRefactoring}
	#{PullUpInstanceVariableRefactoring}
	#{PushDownClassVariableRefactoring}
	#{PushDownInstanceVariableRefactoring}
	#{PushDownMethodRefactoring}
	#{PushUpMethodRefactoring}
	#{RBAbstractClass}
	#{RBAbstractCondition}
	#{RBClass}
	#{RBCondition}
	#{RBConjunctiveCondition}
	#{RBMetaclass}
	#{RBMethod}
	#{RBMethodName}
	#{RBNamespace}
	#{RBNegationCondition}
	#{RBReadBeforeWrittenTester}
	#{Refactoring}
	#{RefactoringError}
	#{RefactoringManager}
	#{RefactoringWarning}
	#{RefactoryTyper}
	#{RemoveClassRefactoring}
	#{RemoveClassVariableRefactoring}
	#{RemoveInstanceVariableRefactoring}
	#{RemoveMethodRefactoring}
	#{RemoveParameterRefactoring}
	#{RenameClassRefactoring}
	#{RenameClassVariableRefactoring}
	#{RenameInstanceVariableRefactoring}
	#{RenameMethodRefactoring}
	#{RenameTemporaryRefactoring}
	#{SplitClassRefactoring}
	#{TemporaryToInstanceVariableRefactoring}
	#{VariableRefactoring}
).

package setMethodNames: #(
	#(#{Class class} #rootsOfTheWorld)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\..\..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\..\..\..\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter'
	'..\Change Objects\RBChangeObjects'
	'..\Environments\RBEnvironments'
	'..\Parser\RBParser'
	'..\..\..\..\Object Arts\Dolphin\System\Compiler\Smalltalk Parser'
).

package!

"Class Definitions"!

Object subclass: #RBAbstractClass
	instanceVariableNames: 'name newMethods instanceVariableNames model superclass subclasses removedMethods realClass'
	classVariableNames: 'LookupSuperclass'
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RBAbstractCondition
	instanceVariableNames: 'errorMacro'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RBMethod
	instanceVariableNames: 'class compiledMethod source selector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RBMethodName
	instanceVariableNames: 'selector arguments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RBNamespace
	instanceVariableNames: 'changes environment newClasses removedClasses changedClasses rootClasses implementorsCache sendersCache'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #Refactoring
	instanceVariableNames: 'model options'
	classVariableNames: 'AbortSignal RefactoringOptions'
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RefactoringManager
	instanceVariableNames: 'refactorings'
	classVariableNames: 'Instance'
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #RefactoryTyper
	instanceVariableNames: 'model class variableTypes bestGuesses variableMessages backpointers methodName selectorLookup'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Error subclass: #RefactoringError
	instanceVariableNames: 'refactoring'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Warning subclass: #RefactoringWarning
	instanceVariableNames: 'refactoring'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RBAbstractClass subclass: #RBClass
	instanceVariableNames: 'classVariableNames poolDictionaryNames category'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RBAbstractClass subclass: #RBMetaclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RBAbstractCondition subclass: #RBCondition
	instanceVariableNames: 'block type errorBlock'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RBAbstractCondition subclass: #RBConjunctiveCondition
	instanceVariableNames: 'left right failed'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RBAbstractCondition subclass: #RBNegationCondition
	instanceVariableNames: 'condition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #AbstractVariablesRefactoring
	instanceVariableNames: 'tree fromClass instVarReaders instVarWriters classVarReaders classVarWriters toClasses ignore'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #ClassRefactoring
	instanceVariableNames: 'className'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #ExpandReferencedPoolsRefactoring
	instanceVariableNames: 'pools fromClass parseTree toClasses'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #MethodRefactoring
	instanceVariableNames: 'class'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #RemoveClassRefactoring
	instanceVariableNames: 'classNames'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #SplitClassRefactoring
	instanceVariableNames: 'class instanceVariables newClassName referenceVariableName newClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Refactoring subclass: #VariableRefactoring
	instanceVariableNames: 'class variableName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ClassRefactoring subclass: #AddClassRefactoring
	instanceVariableNames: 'category superclass subclasses'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ClassRefactoring subclass: #ChildrenToSiblingsRefactoring
	instanceVariableNames: 'parent subclasses'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ClassRefactoring subclass: #RenameClassRefactoring
	instanceVariableNames: 'newName class'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #AddMethodRefactoring
	instanceVariableNames: 'protocols source'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #ChangeMethodNameRefactoring
	instanceVariableNames: 'newSelector oldSelector permutation implementors'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #ExtractMethodRefactoring
	instanceVariableNames: 'selector extractionInterval extractedParseTree modifiedParseTree parameters needsReturn'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #ExtractMethodToComponentRefactoring
	instanceVariableNames: 'selector extractionInterval extractedMethodSelector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #ExtractToTemporaryRefactoring
	instanceVariableNames: 'sourceInterval selector newVariableName parseTree'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #InlineAllSendersRefactoring
	instanceVariableNames: 'selector numberReplaced numberNotReplaced'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #InlineMethodRefactoring
	instanceVariableNames: 'sourceInterval inlineParseTree sourceParseTree sourceSelector sourceMessage inlineClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #InlineTemporaryRefactoring
	instanceVariableNames: 'sourceInterval selector sourceTree assignmentNode definingNode'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #MoveMethodRefactoring
	instanceVariableNames: 'selector variable moveToClasses parseTree hasOnlySelfReturns selfVariableName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #MoveVariableDefinitionRefactoring
	instanceVariableNames: 'selector interval name parseTree blockNodes definingNode'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #PushDownMethodRefactoring
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #PushUpMethodRefactoring
	instanceVariableNames: 'removeDuplicates selectors'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #RemoveMethodRefactoring
	instanceVariableNames: 'selectors'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #RenameTemporaryRefactoring
	instanceVariableNames: 'selector interval oldName newName parseTree'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
MethodRefactoring subclass: #TemporaryToInstanceVariableRefactoring
	instanceVariableNames: 'selector temporaryVariableName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ChangeMethodNameRefactoring subclass: #AddParameterRefactoring
	instanceVariableNames: 'initializer senders'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ChangeMethodNameRefactoring subclass: #RemoveParameterRefactoring
	instanceVariableNames: 'parameterIndex argument'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
ChangeMethodNameRefactoring subclass: #RenameMethodRefactoring
	instanceVariableNames: 'hasPermutedArguments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
RemoveParameterRefactoring subclass: #InlineParameterRefactoring
	instanceVariableNames: 'expressions'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
InlineMethodRefactoring subclass: #InlineMethodFromComponentRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #AbstractClassVariableRefactoring
	instanceVariableNames: 'accessorsRefactoring'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #AbstractInstanceVariableRefactoring
	instanceVariableNames: 'accessorsRefactoring'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #AddClassVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #AddInstanceVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #CreateAccessorsForVariableRefactoring
	instanceVariableNames: 'getterMethod setterMethod classVariable needsReturn'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #ProtectInstanceVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #PullUpClassVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #PullUpInstanceVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #PushDownClassVariableRefactoring
	instanceVariableNames: 'destinationClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #PushDownInstanceVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #RemoveClassVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #RemoveInstanceVariableRefactoring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #RenameClassVariableRefactoring
	instanceVariableNames: 'newName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
VariableRefactoring subclass: #RenameInstanceVariableRefactoring
	instanceVariableNames: 'newName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StParseNodeVisitor subclass: #RBReadBeforeWrittenTester
	instanceVariableNames: 'read checkNewTemps scopeStack'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Class class methodsFor!

rootsOfTheWorld
	#rbFix. "Dolphin uses #allRoots"

	^self environment allRoots! !
!Class class categoriesFor: #rootsOfTheWorld!class hierarchy-accessing!private! !

"End of package definition"!

