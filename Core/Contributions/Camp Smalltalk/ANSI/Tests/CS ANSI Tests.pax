| package |
package := Package name: 'CS ANSI Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.

package basicScriptAt: #postinstall put: '| locator |
locator := FolderRelativeFileLocator basePath: self path.
#(''AnsiDB.st'' ''AnsiInit.st'') do: [:each | SourceManager default fileIn: (locator localFileSpecFor: each)]'.

package setClassNames: #(
	#{Smalltalk.AbstractDictionaryHelper}
	#{Smalltalk.ArrayANSITest}
	#{Smalltalk.ArrayFactoryANSITest}
	#{Smalltalk.BagANSITest}
	#{Smalltalk.BagFactoryANSITest}
	#{Smalltalk.BooleanANSITest}
	#{Smalltalk.ByteArrayANSITest}
	#{Smalltalk.ByteArrayFactoryANSITest}
	#{Smalltalk.CharacterANSITest}
	#{Smalltalk.CharacterFactoryANSITest}
	#{Smalltalk.CollectionHelper}
	#{Smalltalk.CollectionStreamHelper}
	#{Smalltalk.CollectionTest}
	#{Smalltalk.DateAndTimeANSITest}
	#{Smalltalk.DateAndTimeFactoryANSITest}
	#{Smalltalk.DictionaryANSITest}
	#{Smalltalk.DictionaryFactoryANSITest}
	#{Smalltalk.DurationANSITest}
	#{Smalltalk.DurationFactoryANSITest}
	#{Smalltalk.DyadicValuableANSITest}
	#{Smalltalk.ErrorANSITest}
	#{Smalltalk.ErrorClassANSITest}
	#{Smalltalk.ExceptionANSITest}
	#{Smalltalk.ExceptionClassANSITest}
	#{Smalltalk.ExceptionSetANSITest}
	#{Smalltalk.ExtensibleCollectionHelper}
	#{Smalltalk.FailedMessageANSITest}
	#{Smalltalk.FileStreamFactoryANSITest}
	#{Smalltalk.FloatANSITest}
	#{Smalltalk.FloatCharacterizationANSITest}
	#{Smalltalk.FractionANSITest}
	#{Smalltalk.FractionFactoryANSITest}
	#{Smalltalk.GettableStreamHelper}
	#{Smalltalk.IdentityDictionaryANSITest}
	#{Smalltalk.IdentityDictionaryFactoryANSITest}
	#{Smalltalk.IntegerANSITest}
	#{Smalltalk.IntervalANSITest}
	#{Smalltalk.IntervalFactoryANSITest}
	#{Smalltalk.MainTestCase}
	#{Smalltalk.MessageNotUnderstoodANSITest}
	#{Smalltalk.MessageNotUnderstoodSelectorANSITest}
	#{Smalltalk.MonadicBlockANSITest}
	#{Smalltalk.MsgParmSpec}
	#{Smalltalk.MsgReturnRuleSpec}
	#{Smalltalk.MsgReturnSpec}
	#{Smalltalk.NiladicBlockANSITest}
	#{Smalltalk.NilANSITest}
	#{Smalltalk.NotificationANSITest}
	#{Smalltalk.NotificationClassANSITest}
	#{Smalltalk.ObjectANSITest}
	#{Smalltalk.ObjectClassANSITest}
	#{Smalltalk.ObjectHelper}
	#{Smalltalk.OrderedCollectionANSITest}
	#{Smalltalk.OrderedCollectionFactoryANSITest}
	#{Smalltalk.ProtocolANYSpec}
	#{Smalltalk.ProtocolMsgSpec}
	#{Smalltalk.ProtocolSpec}
	#{Smalltalk.PuttableStreamHelper}
	#{Smalltalk.ReadableStringHelper}
	#{Smalltalk.ReadFileStreamANSITest}
	#{Smalltalk.ReadStreamANSITest}
	#{Smalltalk.ReadStreamFactoryANSITest}
	#{Smalltalk.ReadStreamHelper}
	#{Smalltalk.ReadWriteStreamANSITest}
	#{Smalltalk.ReadWriteStreamFactoryANSITest}
	#{Smalltalk.ScaledDecimalANSITest}
	#{Smalltalk.SelectorANSITest}
	#{Smalltalk.SequencedCollectionHelper}
	#{Smalltalk.SequencedContractibleCollectionHelper}
	#{Smalltalk.SequencedReadableCollectionHelper}
	#{Smalltalk.SequencedReadableCollectionTest}
	#{Smalltalk.SequencedStreamHelper}
	#{Smalltalk.SequencedStreamTest}
	#{Smalltalk.SetANSITest}
	#{Smalltalk.SetFactoryANSITest}
	#{Smalltalk.SortedCollectionANSITest}
	#{Smalltalk.SortedCollectionFactoryANSITest}
	#{Smalltalk.StringANSITest}
	#{Smalltalk.StringFactoryANSITest}
	#{Smalltalk.SymbolANSITest}
	#{Smalltalk.TestCaseHelper}
	#{Smalltalk.TestCaseProtocol}
	#{Smalltalk.TranscriptANSITest}
	#{Smalltalk.WarningANSITest}
	#{Smalltalk.WarningClassANSITest}
	#{Smalltalk.WriteFileStreamANSITest}
	#{Smalltalk.WriteStreamANSITest}
	#{Smalltalk.WriteStreamFactoryANSITest}
	#{Smalltalk.WriteStreamHelper}
	#{Smalltalk.ZeroDivideANSITest}
	#{Smalltalk.ZeroDivideFactoryANSITest}
).

package setMethodNames: #(
	#(#{Core.ClassDescription} #addProtocolNamed:)
	#(#{Core.ClassDescription} #ansiProtocolNames)
	#(#{Core.ClassDescription} #ansiProtocolNames:)
	#(#{Core.ClassDescription} #ansiProtocols)
	#(#{Core.ClassDescription} #conformsToAnsiProtocolNamed:)
	#(#{Core.ClassDescription} #definedAsProtocolNames)
	#(#{Core.ClassDescription} #removeAnsiProtocolNamed:)
	#(#{Core.ClassDescription} #removeAnsiProtocolNamed:ifAbsent:)
).

package setPrerequisites: #(
	'..\..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\SUnit\SUnit'
	'..\..\SUnit\SUnitLegacy'
).

package!

"Class Definitions"!

Core.Object subclass: #MsgParmSpec
	instanceVariableNames: 'parmName parmProtocols parmAliasingAttribute'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #MsgReturnSpec
	instanceVariableNames: 'returnValueProtocols returnValueAliasingAttribute'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #ProtocolANYSpec
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #ProtocolMsgSpec
	instanceVariableNames: 'selector parameterSpecifications returnValueSpecifications specSections'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MsgReturnSpec subclass: #MsgReturnRuleSpec
	instanceVariableNames: 'ruleSourceCode ruleBlock'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ProtocolANYSpec subclass: #ProtocolSpec
	instanceVariableNames: 'name conformsTo description messageSpecifications'
	classVariableNames: 'ClassProtocols DefaultConvTable FixNum OperatorTable Protocols UnaryConvTable UndefinedConformsToNames'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
XProgramming.SUnit.TestCase subclass: #TestCaseProtocol
	instanceVariableNames: ''
	classVariableNames: 'IsStrict'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseProtocol subclass: #MainTestCase
	instanceVariableNames: 'messages helpers'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseProtocol subclass: #TestCaseHelper
	instanceVariableNames: 'testCase'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: 'testSelectors'
	classConstants: {}!
MainTestCase subclass: #ArrayFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #BagFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #BooleanANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ByteArrayFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #CharacterANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #CharacterFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #CollectionTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DateAndTimeANSITest
	instanceVariableNames: 'd19970426t8 savedLocale'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DateAndTimeFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DictionaryFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DurationANSITest
	instanceVariableNames: 'off0123 smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf numList'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DurationFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #DyadicValuableANSITest
	instanceVariableNames: 'blk2args'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ErrorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ErrorClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ExceptionANSITest
	instanceVariableNames: 'unchanged changed value exceptionClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ExceptionClassANSITest
	instanceVariableNames: 'exceptionClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ExceptionSetANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FailedMessageANSITest
	instanceVariableNames: 'failedMsg'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FileStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FloatANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FloatCharacterizationANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FractionANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #FractionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #IdentityDictionaryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #IdentityDictionaryFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #IntegerANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #IntervalFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #MessageNotUnderstoodANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #MessageNotUnderstoodSelectorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #MonadicBlockANSITest
	instanceVariableNames: 'blk1args'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #NiladicBlockANSITest
	instanceVariableNames: 'blk0args canonicalObject'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #NilANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #NotificationANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #NotificationClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ObjectANSITest
	instanceVariableNames: 'object'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ObjectClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #OrderedCollectionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ReadFileStreamANSITest
	instanceVariableNames: 'readFileStream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ReadStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ReadWriteStreamANSITest
	instanceVariableNames: 'readWriteStream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ReadWriteStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ScaledDecimalANSITest
	instanceVariableNames: 'smallInt2 largeNegInt2000000000 largePosInt2000000000 float2 fractionHalf sclDec2s3 numList'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #SelectorANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #SequencedStreamTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #SetFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #SortedCollectionFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #StringFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #TranscriptANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #WarningANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #WarningClassANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #WriteFileStreamANSITest
	instanceVariableNames: 'writeFileStream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #WriteStreamFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ZeroDivideANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
MainTestCase subclass: #ZeroDivideFactoryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CollectionTest subclass: #BagANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CollectionTest subclass: #DictionaryANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CollectionTest subclass: #IntervalANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CollectionTest subclass: #SequencedReadableCollectionTest
	instanceVariableNames: 'canonicalObjects'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CollectionTest subclass: #SetANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #ArrayANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #ByteArrayANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #OrderedCollectionANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #SortedCollectionANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #StringANSITest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedReadableCollectionTest subclass: #SymbolANSITest
	instanceVariableNames: 'smalltalkSymbol'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedStreamTest subclass: #ReadStreamANSITest
	instanceVariableNames: 'readStream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SequencedStreamTest subclass: #WriteStreamANSITest
	instanceVariableNames: 'writeStream buffer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #AbstractDictionaryHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #CollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #CollectionStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #ExtensibleCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #GettableStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #ObjectHelper
	instanceVariableNames: 'object'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #PuttableStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #ReadableStringHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #ReadStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #SequencedCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #SequencedContractibleCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #SequencedReadableCollectionHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #SequencedStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
TestCaseHelper subclass: #WriteStreamHelper
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.ClassDescription methodsFor!

addProtocolNamed: protocolName 
	"Add the protocol named, protocolName, to the list of protocols to which the receiver conforms."

	| tmpProtocolNames |
	#ACSProS.
	tmpProtocolNames := self ansiProtocolNames.
	tmpProtocolNames add: protocolName.
	self ansiProtocolNames: tmpProtocolNames!

ansiProtocolNames
	"Answer the names of protocols to which the receiver's instances directly conform. 
	Note: This excludes inherited protocols."

	| tmpList |
	tmpList := Smalltalk.ProtocolSpec classProtocols at: self ifAbsent: [nil].
	tmpList isNil ifTrue: [^Smalltalk.ProtocolSpec defaultProtocolNameCollection].
	^tmpList!

ansiProtocolNames: protocolNameList
	"Private - Set the names of protocols to which the receiver's instances directly conform to protocolNameList. 
	Note: This excludes inherited protocols. protocolNameList must be a <collection> of <symbol>s."

	(protocolNameList isKindOf: Set) ifFalse: [self error: 'Protocol name list not a Set.'].
	protocolNameList isEmpty
		ifTrue: [Smalltalk.ProtocolSpec classProtocols removeKey: self ifAbsent: []]
		ifFalse: [Smalltalk.ProtocolSpec classProtocols at: self put: protocolNameList]!

ansiProtocols
	"Answer the protocols to which the receiver's instances directly conform. 
	Note: This excludes inherited protocols."

	^Smalltalk.ProtocolSpec protocolsInNameList: self ansiProtocolNames!

conformsToAnsiProtocolNamed: protocolName 
	"Answer whether the receiver conforms to the protocol named protocolName.
	Note: This includes inherited protocols."

	#ACSProS.
	^(self ansiProtocolNames includes: protocolName) 
		or: [self superclass notNil and: [self superclass conformsToAnsiProtocolNamed: protocolName]]!

definedAsProtocolNames
	"Answer the names of protocols to which the receiver's instances directly conform.  If it has no protocols, check super classes until protocols are found 
	Note: This excludes inherited protocols. 
	200/03/04 Harmon, R. Added."

	| tmpList |
	tmpList := Smalltalk.ProtocolSpec classProtocols at: self ifAbsent: [nil].
	tmpList isNil ifTrue: [^self superclass definedAsProtocolNames].
	^tmpList!

removeAnsiProtocolNamed: protocolName
	"Remove the protocol named, protocolName, from the list of protocols to which the receiver conforms."

	self removeAnsiProtocolNamed: protocolName
		ifAbsent: [Smalltalk.ProtocolSpec errorProtocolNotFound: protocolName]!

removeAnsiProtocolNamed: protocolName ifAbsent: notFoundBlock 
	"Remove the protocol named, protocolName, from the list of protocols to which the receiver conforms.  Evaluate notFoundBlock if not found."

	| tmpProtocolNames |
	#ACSProS.
	tmpProtocolNames := self ansiProtocolNames.
	tmpProtocolNames isEmpty ifTrue: [^notFoundBlock value].
	tmpProtocolNames remove: protocolName ifAbsent: [^notFoundBlock value].
	self ansiProtocolNames: tmpProtocolNames! !
!Core.ClassDescription categoriesFor: #addProtocolNamed:!public! !
!Core.ClassDescription categoriesFor: #ansiProtocolNames!protocols!public! !
!Core.ClassDescription categoriesFor: #ansiProtocolNames:!public! !
!Core.ClassDescription categoriesFor: #ansiProtocols!protocols!public! !
!Core.ClassDescription categoriesFor: #conformsToAnsiProtocolNamed:!public! !
!Core.ClassDescription categoriesFor: #definedAsProtocolNames!public! !
!Core.ClassDescription categoriesFor: #removeAnsiProtocolNamed:!public! !
!Core.ClassDescription categoriesFor: #removeAnsiProtocolNamed:ifAbsent:!public! !

"End of package definition"!

