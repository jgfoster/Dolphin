| package |
package := Package name: 'ActiveX Automation Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{OS.COM.Tests.BSTRTest}
	#{OS.COM.Tests.IDispatchTest}
	#{OS.COM.Tests.SAFEARRAYTest}
	#{OS.COM.Tests.VARIANTTest}
).

package setMethodNames: #(
	#(#{External.Tests.FunctionDescriptorTest} #testComPtrs)
	#(#{External.Tests.StructureTest} #testExtendedErrorInfo)
).

package setPrerequisites: #(
	'ActiveX Automation'
	'..\Components\Scripting\ActiveX Scripting'
	'..\ActiveX Tests'
	'..\..\..\Samples\ActiveX\Random\COM Random Stream'
	'..\..\Base\Dolphin'
	'..\..\Base\Dolphin Base Tests'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\COM\OLE COM'
).

package!

"Class Definitions"!

Core.Tests.DolphinTest subclass: #'OS.COM.Tests.BSTRTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'OS.COM.Tests.IDispatchTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'OS.COM.Tests.VARIANTTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.COM.AutomationConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
External.Tests.GenericExternalArrayTest subclass: #'OS.COM.Tests.SAFEARRAYTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{OS.Win32Errors})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!External.Tests.FunctionDescriptorTest methodsFor!

testComPtrs
	self
		parseStructArg: COM.IUnknown
		valueType: ExtCallArgSTRUCT
		refType: ExtCallArgCOMPTR.
	self
		parseStructArg: COM.IDispatch
		valueType: ExtCallArgSTRUCT
		refType: ExtCallArgCOMPTR! !
!External.Tests.FunctionDescriptorTest categoriesFor: #testComPtrs!public! !

!External.Tests.StructureTest methodsFor!

testExtendedErrorInfo
	"Tests that extended error info is accessed on failed external API calls through COM interfaces if the target object supports it."

	| script errorInfo error |
	script := Smalltalk.IScriptControl new.
	self assert: script supportsErrorInfo.
	errorInfo := [script eval: '1+2'] on: HRESULTError do: [:ex | ex errorInfo].
	self assert: errorInfo notNil.
	self assert: errorInfo source equals: 'ScriptControl'.
	self assert: errorInfo guid equals: Smalltalk.IScriptControl guid.
	script free.
	error := [script eval: '1+2'] on: HRESULTError do: [:ex | ex].
	self assertIsNil: error errorInfo.
	self assert: error hresult
		equals: (HRESULT fromPrimitiveFailureCode: _PrimitiveFailureCode.InvalidPointer)! !
!External.Tests.StructureTest categoriesFor: #testExtendedErrorInfo!public!unit tests! !

"End of package definition"!

