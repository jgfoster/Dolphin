| package |
package := Package name: 'ActiveX Tests'.
package paxVersion: 2.1;
	basicComment: ''.


package setClassNames: #(
	#{Smalltalk.ADODBTest}
	#{Smalltalk.AXEventSinkTest}
	#{Smalltalk.AXTypeLibraryAnalyzerTest}
	#{Smalltalk.CLSIDTest}
	#{Smalltalk.COMInterfaceTest}
	#{Smalltalk.IIDTest}
	#{Smalltalk.TestTypelib}
	#{Smalltalk.XmlFormatterTest}
).

package setMethodNames: #(
	#(#{Kernel.Tests.VMTest} #testExtCallArgBstr)
).

package setPrerequisites: #(
	'Automation\ActiveX Automation'
	'Connection Points\ActiveX Connection Points'
	'Components\ADO\ADODB (Deprecated)'
	'..\Database\Database Tests'
	'..\Base\Dolphin'
	'..\Base\Dolphin Base Tests'
	'COM\OLE COM'
	'Components\Font\OLE Font'
	'..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
	'Components\XML DOM\XML DOM'
	'..\..\Samples\MVP\XmlPad\XmlPad'
).

package!

"Class Definitions"!

Core.Tests.DolphinTest subclass: #AXEventSinkTest
	instanceVariableNames: 'sink object received'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #AXTypeLibraryAnalyzerTest
	instanceVariableNames: 'analyzer'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #COMInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #XmlFormatterTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DBTest subclass: #ADODBTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Tests.GUIDTest subclass: #CLSIDTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
External.Tests.GUIDTest subclass: #IIDTest
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
XProgramming.SUnit.TestResource subclass: #TestTypelib
	instanceVariableNames: 'analyzer'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Kernel.Tests.VMTest methodsFor!

testExtCallArgBstr
	"Note that BSTR is one of the FFI parameter types that may cause the VM to perform a type conversion that allocates memory, and as such cannot be used safely in overlapped calls unless the calling code is careful to perform all conversions to BSTR from Smalltalk strings in advance with #asBSTR"

	| beers olelib |
	olelib := OS.COM.OLEAutLibrary default.
	{''. 'a'. '£2'. 'a' , (String with: Character null) , 'b'} do: 
			[:each |
			| subject expected actual |
			expected := each asUtf16String size.
			actual := olelib sysStringLen: each.
			self assert: actual equals: expected.
			subject := each asUtf8String.
			actual := olelib sysStringLen: subject.
			self assert: actual equals: expected.
			subject := each asUtf16String.
			actual := olelib sysStringLen: subject.
			self assert: actual equals: expected].
	"Like most string length functions, SysStringLen reports the number of code units, not the number of characters"
	beers := Utf8String fromByteArray: #[16rF0 16r9F 16r8D 16rBB].
	self assert: (olelib sysStringLen: beers) equals: 2.
	self assert: (olelib sysStringLen: beers asUtf16String) equals: 2! !
!Kernel.Tests.VMTest categoriesFor: #testExtCallArgBstr!public!unit tests! !

"End of package definition"!

