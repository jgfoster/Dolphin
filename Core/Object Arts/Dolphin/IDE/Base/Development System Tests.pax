| package |
package := Package name: 'Development System Tests'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{OS.Tests.VersionResourceTest}
	#{Refactory.Browser.Tests.MethodCategoryEnvironmentTest}
	#{Refactory.Browser.Tests.PackageEnvironmentTest}
	#{Refactory.Browser.Tests.PluggableEnvironmentTest}
	#{Refactory.Browser.Tests.RewriteTestCase}
	#{Tools.Tests}
	#{Tools.Tests.ImageListViewTest}
	#{Tools.Tests.KeyedAspectTest}
	#{Tools.Tests.MenuPainterTest}
	#{Tools.Tests.MockScintillaView}
	#{Tools.Tests.ProductReleaseTest}
	#{Tools.Tests.SmalltalkSystemTest}
	#{Tools.Tests.SmalltalkWorkspaceTest}
	#{Tools.Tests.StStyler}
).

package setMethodNames: #(
	#(#{External.Tests.INTEGERTest} #testPrintOnNull)
	#(#{External.Tests.INTEGERTest} #testPrintOnSigned)
	#(#{External.Tests.INTEGERTest} #testPrintOnUnsigned)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoHardBreakpoint)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoSupersendsOther)
	#(#{Kernel.Tests.ParserErrorTest} #testInfoUnreferencedArg)
	#(#{Kernel.Tests.ParserErrorTest} #testWarningUsesBooleanClass)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnMsgUnimplemented)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnUndefinedSelector)
	#(#{Kernel.Tests.ParserErrorTest} #testWarnUnimplementedAbstractMethod)
	#(#{UI.Scintilla.Tests.ScintillaViewTest} #testTokensFromTo)
	#(#{UI.Tests.BorderLayoutTest} #testResourceBrowserPreview)
).

package setPrerequisites: #(
	'..\..\..\Samples\MVP\Animal Game\Animals'
	'Development System'
	'..\..\Base\Dolphin'
	'..\..\Base\Dolphin Base Tests'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Dolphin MVP Tests'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View Tests'
	'..\..\Lagoon\Lagoon Image Stripper'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Environments\RBEnvironments'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\SmallLint\RBSmallLint'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Tests\RBTestMethods'
	'..\..\..\..\Contributions\Refactory\Refactoring Browser\Tests\RBTests'
	'..\..\System\Compiler\Tests\Smalltalk Compiler Tests'
	'..\..\System\Compiler\Smalltalk Parser'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnitPreload'
).

package!

"Class Definitions"!

Tools subclass: #'Tools.Tests'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{XProgramming.SUnit})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'Tools.Tests.MockScintillaView'
	instanceVariableNames: 'lastStyled tokens text currentTextStyles styleIdMap'
	classVariableNames: ''
	imports: #(#{UI.Scintilla.ScintillaConstants})
	classInstanceVariableNames: ''
	classConstants: {}!
Kernel.ParseNodeVisitor subclass: #'Tools.Tests.StStyler'
	instanceVariableNames: 'view arrayDepth'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
XProgramming.SUnit.TestCase subclass: #'Refactory.Browser.Tests.RewriteTestCase'
	instanceVariableNames: 'env'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.KeyedAspectTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.MenuPainterTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.ProductReleaseTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'Tools.Tests.SmalltalkSystemTest'
	instanceVariableNames: 'devsys'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Tests.DolphinTest subclass: #'OS.Tests.VersionResourceTest'
	instanceVariableNames: 'updatePath sourceModule sourceSize sourceBytes'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
UI.Tests.PresenterTest subclass: #'Tools.Tests.SmalltalkWorkspaceTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
UI.Tests.ImageViewAbstractTest subclass: #'Tools.Tests.ImageListViewTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.MethodCategoryEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.PackageEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Refactory.Browser.Tests.BrowserEnvironmentTest subclass: #'Refactory.Browser.Tests.PluggableEnvironmentTest'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!External.Tests.INTEGERTest methodsFor!

testPrintOnNull
	| subject |
	subject := DWORD new.
	self assert: subject printString equals: 'a DWORD(0)'!

testPrintOnSigned
	| subject |
	subject := SDWORD fromInteger: 123.
	self assert: subject printString equals: 'a SDWORD(123)'!

testPrintOnUnsigned
	| subject |
	subject := DWORD fromInteger: 123.
	self assert: subject printString equals: 'a DWORD(16r7B)'! !
!External.Tests.INTEGERTest categoriesFor: #testPrintOnNull!public!unit tests! !
!External.Tests.INTEGERTest categoriesFor: #testPrintOnSigned!public!unit tests! !
!External.Tests.INTEGERTest categoriesFor: #testPrintOnUnsigned!public!unit tests! !

!Kernel.Tests.ParserErrorTest methodsFor!

testInfoHardBreakpoint
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoHardBreakpoint #testInfoHardBreakpointInBlock) do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source indexOfSubCollection: 'self halt'.
					start to: start + 8]
				code: CInfoHardBreakpoint]!

testInfoSupersendsOther
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoSupersendsOther) do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source indexOfSubCollection: 'super'.
					start 
						to: (source 
								nextIndexOf: Character cr
								from: start
								to: source size) - 1]
				code: CInfoSupersendsOther]!

testInfoUnreferencedArg
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testInfoUnreferencedArgBlock #testInfoUnreferencedArgMethod: #testInfoUnreferencedArgOptimizedBlock) 
		do: 
			[:each | 
			self 
				parseMethodInfo: each
				rangeBlock: 
					[:source | 
					| start |
					start := source lastIndexOf: $a.
					start to: start]
				code: CInfoUnreferencedArg]!

testWarningUsesBooleanClass
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarningUsesTrue #testWarningUsesFalse) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start name |
					name := each asPhrase subStrings last.
					start := source indexOfSubCollection: name startingAt: each size + 1.
					start to: start + name size - 1]
				code: CWarnUsesBooleanClass]!

testWarnMsgUnimplemented
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnMsgUnimplementedBySelf #testWarnMsgUnimplementedBySuper #testWarnMsgUnimplementedByConst #testWarnMsgUnimplementedByNil)
		do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start name |
					name := each asPhrase subStrings last.
					start := source
								findString: name
								startingAt: each size + 1
								ignoreCase: true.
					start to: (source
								nextIndexOf: $.
								from: start
								to: source size) - 1]
				code: CWarnMsgUnimplemented]!

testWarnUndefinedSelector
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnUndefinedSelector) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start |
					start := source indexOfSubCollection: 'self'.
					start to: (source
								nextIndexOf: $.
								from: start
								to: source size) - 1]
				code: CWarnUndefinedSelector]!

testWarnUnimplementedAbstractMethod
	semanticAnalyserClass := Tools.BrowserSemanticAnalyser.
	#(#testWarnUnimplementedAbstractMethod) do: 
			[:each |
			self
				parseMethodWarning: each
				rangeBlock: 
					[:source |
					| start msg |
					msg := 'self subclassResponsibility'.
					start := source indexOfSubCollection: msg.
					start to: start + msg size - 1]
				code: CWarnUnimplementedAbstractMethod]! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testInfoHardBreakpoint!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testInfoSupersendsOther!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testInfoUnreferencedArg!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testWarningUsesBooleanClass!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testWarnMsgUnimplemented!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testWarnUndefinedSelector!public!unit tests! !
!Kernel.Tests.ParserErrorTest categoriesFor: #testWarnUnimplementedAbstractMethod!public!unit tests! !

!UI.Scintilla.Tests.ScintillaViewTest methodsFor!

testTokensFromTo
	| tokens expected styler |
	presenter textStyles: Tools.SmalltalkWorkspace textStyles.
	presenter stylerClass: Tools.SmalltalkExpressionStyler.
	styler := Tools.Tests.StStyler new.
	#('' ' ' ' 	 ' ' a' 'a ' ' a ' ' a #a' 'a #a ' ' a #a ' ' a #a 1.2 '''' ''blah blah'' (') do: 
			[:text |
			presenter text: text.
			presenter restyleAll.
			tokens := (presenter tokensFrom: 1 to: presenter textLength) asArray.
			expected := (Scanner on: presenter text readStream) contents
						collect: [:each | (styler styleNameFor: each) -> (text copyFrom: each start to: each stop)].
			self assert: tokens equals: expected]! !
!UI.Scintilla.Tests.ScintillaViewTest categoriesFor: #testTokensFromTo!public!unit tests! !

!UI.Tests.BorderLayoutTest methodsFor!

testResourceBrowserPreview
	"#1758"

	| resourceId resourceView bmp toolbox resources |
	resourceId := ResourceIdentifier class: Tools.ResourceBrowser name: 'Default view'.
	resourceView := 
			[Smalltalk developmentSystem loadViewResource: resourceId resource inContext: View desktop]
					on: Error
					do: [:x | ].
	bmp := resourceView notNil
				ifTrue: 
					[resourceView invalidateLayoutDeeply.
					Bitmap fromView: resourceView]
				ifFalse: [Error icon].
	toolbox := resourceView viewNamed: 'resourceToolbox'.
	resources := resourceView viewNamed: 'resources'.
	self assert: (resources viewNamed: 'resources') extent x equals: resources extent x.
	resourceView destroy! !
!UI.Tests.BorderLayoutTest categoriesFor: #testResourceBrowserPreview!public!unit tests! !

"End of package definition"!

