| package |
package := Package name: 'Dolphin Announcements'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{Announcement}
	#{AnnouncementSet}
	#{AnnouncementSubscription}
	#{Announcer}
	#{SubscriptionRegistry}
	#{WeakAnnouncementSubscription}
	#{WeakMessageSend}
	#{WeakSubscriptionBuilder}
).

package setMethodNames: #(
	#(#{BlockClosure} #announcementSubscriber)
	#(#{BlockClosure} #asWeakMessageSend)
	#(#{MessageSend} #asWeakMessageSend)
	#(#{MessageSendAbstract} #announcementSubscriber)
	#(#{Symbol} #asAnnouncement)
	#(#{Symbol} #handlesAnnouncement:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Object subclass: #Announcement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #AnnouncementSubscription
	instanceVariableNames: 'announcer announcementClass subscriber action'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #Announcer
	instanceVariableNames: 'registry'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #SubscriptionRegistry
	instanceVariableNames: 'subscriptions monitor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #WeakSubscriptionBuilder
	instanceVariableNames: 'announcer'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
WeakArray variableSubclass: #WeakAnnouncementSubscription
	instanceVariableNames: 'announcer announcementClass action'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Set variableSubclass: #AnnouncementSet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
EventMessageSend variableSubclass: #WeakMessageSend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!BlockClosure methodsFor!

announcementSubscriber
	^self!

asWeakMessageSend
	self receiver notNil ifTrue: [self error: 'Only clean blocks can be weak'].
	^self! !
!BlockClosure categoriesFor: #announcementSubscriber!public! !
!BlockClosure categoriesFor: #asWeakMessageSend!public! !

!MessageSend methodsFor!

asWeakMessageSend

	^ WeakMessageSend
		receiver: receiver
		selector: selector
		arguments: args copy! !
!MessageSend categoriesFor: #asWeakMessageSend!commands!public! !

!MessageSendAbstract methodsFor!

announcementSubscriber
	^self receiver! !
!MessageSendAbstract categoriesFor: #announcementSubscriber!public! !

!Symbol methodsFor!

asAnnouncement
	^self!

handlesAnnouncement: anAnnouncement 
	"Anything else than the announcement identifier (in the case of symbol i.e. #foo for ... on: #foo send: #bar to: nil) will not 
	be handled."

	"Announcer new 
		on: #FOO send: #bar to: nil;
		announce: #FOO should raise DNU bar"

	^anAnnouncement == self! !
!Symbol categoriesFor: #asAnnouncement!converting!public! !
!Symbol categoriesFor: #handlesAnnouncement:!converting!public! !

"End of package definition"!

