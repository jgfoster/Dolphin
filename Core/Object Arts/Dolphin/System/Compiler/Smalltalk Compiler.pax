| package |
package := Package name: 'Smalltalk Compiler'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: ''.


package setClassNames: #(
	#{StArgumentVariable}
	#{StBlockScope}
	#{StClassScope}
	#{StEvalScope}
	#{StGeneratedTempVariable}
	#{StInstanceVariable}
	#{StLexicalScope}
	#{StLocalVariable}
	#{StMethodScope}
	#{StOptimizedBlockScope}
	#{StSelfVariable}
	#{StSemanticAnalyser}
	#{StSemanticScope}
	#{StSpecialVariable}
	#{StStaticVariable}
	#{StSuperVariable}
	#{StTempVariable}
	#{StThisContextVariable}
	#{StVariable}
).

package setMethodNames: #(
	#(#{StMethodNode} #analyze)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
	'Smalltalk Parser'
).

package!

"Class Definitions"!

Object subclass: #StSemanticScope
	instanceVariableNames: 'outer'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #StVariable
	instanceVariableNames: 'scope reads writes'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StParseNodeVisitor subclass: #StSemanticAnalyser
	instanceVariableNames: 'methodNode methodClass evaluationContext currentScope scopes literals stringLiterals addToFrame tempDecls inStaticExpression evalScope annotations errorBlock'
	classVariableNames: 'OptimizedMessages RestrictedSelectors SpecialSelectors'
	poolDictionaries: 'SmalltalkParseErrorCodes'
	classInstanceVariableNames: ''
	classConstants: {}!
StSemanticScope subclass: #StClassScope
	instanceVariableNames: 'methodClass instanceVariables selfVariable superVariable'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StSemanticScope subclass: #StEvalScope
	instanceVariableNames: 'pools'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StSemanticScope subclass: #StLexicalScope
	instanceVariableNames: 'locals node thisContextVariable flags'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {
		'FarReturnMask' -> 16r2.
		'NeedsSelfMask' -> 16r1
	}!
StLexicalScope subclass: #StBlockScope
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {
		'EmptyBlockMask' -> 16r200.
		'NeedsOuterMask' -> 16r100
	}!
StLexicalScope subclass: #StMethodScope
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StBlockScope subclass: #StOptimizedBlockScope
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StVariable subclass: #StInstanceVariable
	instanceVariableNames: 'index name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StVariable subclass: #StLocalVariable
	instanceVariableNames: 'node storage'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StVariable subclass: #StSpecialVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StVariable subclass: #StStaticVariable
	instanceVariableNames: 'binding'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StLocalVariable subclass: #StArgumentVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StLocalVariable subclass: #StGeneratedTempVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StLocalVariable subclass: #StTempVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariable subclass: #StSelfVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariable subclass: #StSuperVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariable subclass: #StThisContextVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!StMethodNode methodsFor!

analyze
	StSemanticAnalyser
		analyzeParseTree: self
		for: self methodClass
		context: nil
		pools: #()
		onError: nil! !
!StMethodNode categoriesFor: #analyze!public! !

"End of package definition"!

